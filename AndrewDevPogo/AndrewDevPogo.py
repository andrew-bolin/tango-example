#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        AndrewDevPogo.py
#
#  Project :     tango-example
#
#
#  $Author :      andrew$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["AndrewDevPogo", "AndrewDevPogoClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(AndrewDevPogo.additionnal_import) ENABLED START -----#
from random import randint
from PyTango import DevState
#----- PROTECTED REGION END -----#	//	AndrewDevPogo.additionnal_import

# Device States Description
# ON : output energised
# OFF : output de-energised
# ALARM : alarm condition active
# STANDBY : init complete, ready for command


class AndrewDevPogo (PyTango.Device_4Impl):
    """Reimplementation of standard Tango PowerSupply example via Pogo for training purposes."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(AndrewDevPogo.global_variables) ENABLED START -----#

    #----- PROTECTED REGION END -----#	//	AndrewDevPogo.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        AndrewDevPogo.init_device(self)
        #----- PROTECTED REGION ID(AndrewDevPogo.__init__) ENABLED START -----#
        self.__current_ab = 0
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.__init__

    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(AndrewDevPogo.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_voltage_read = 0.0
        self.attr_current_read = 0.0
        self.attr_temperature_read = 0
        #----- PROTECTED REGION ID(AndrewDevPogo.init_device) ENABLED START -----#
        self.attr_voltage_read = 240
        self.attr_temperature_read = 200
        self.set_state(DevState.STANDBY)
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(AndrewDevPogo.always_executed_hook) ENABLED START -----#
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.always_executed_hook

    # -------------------------------------------------------------------------
    #    AndrewDevPogo read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_voltage(self, attr):
        self.debug_stream("In read_voltage()")
        #----- PROTECTED REGION ID(AndrewDevPogo.voltage_read) ENABLED START -----#
        attr.set_value(self.attr_voltage_read)
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.voltage_read

    def read_current(self, attr):
        self.debug_stream("In read_current()")
        #----- PROTECTED REGION ID(AndrewDevPogo.current_read) ENABLED START -----#
        if self.get_state() in (DevState.STANDBY, DevState.OFF):
            self.attr_current_read = 0
        else:
            self.attr_current_read = self.__current_ab
        attr.set_value(self.attr_current_read)
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.current_read

    def write_current(self, attr):
        self.debug_stream("In write_current()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(AndrewDevPogo.current_write) ENABLED START -----#
        #self.attr_current_read = data
        self.__current_ab = data
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.current_write

    def read_temperature(self, attr):
        self.debug_stream("In read_temperature()")
        #----- PROTECTED REGION ID(AndrewDevPogo.temperature_read) ENABLED START -----#
        # very coarse thermal loss simulation
        if self.get_state() in (DevState.STANDBY, DevState.OFF):
            self.attr_temperature_read = 200
        else:
            self.attr_temperature_read = 200 + (self.attr_current_read**2)*10
        attr.set_value(self.attr_temperature_read + randint(-4, 4))
        
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.temperature_read

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(AndrewDevPogo.read_attr_hardware) ENABLED START -----#
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.read_attr_hardware
    # -------------------------------------------------------------------------
    #    AndrewDevPogo command methods
    # -------------------------------------------------------------------------
    
    def turn_on(self):
        """ Turn the device on
        """
        self.debug_stream("In turn_on()")
        #----- PROTECTED REGION ID(AndrewDevPogo.turn_on) ENABLED START -----#
        self.set_state(DevState.ON)
        self.push_change_event('temperature', self.attr_temperature_read)
        self.push_change_event('current', self.attr_current_read)
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.turn_on

    def turn_off(self):
        """ Turn the device off
        """
        self.debug_stream("In turn_off()")
        #----- PROTECTED REGION ID(AndrewDevPogo.turn_off) ENABLED START -----#
        self.set_state(DevState.OFF)
        self.push_change_event('temperature', self.attr_temperature_read)
        self.push_change_event('current', self.attr_current_read)
        
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.turn_off

    def ramp(self, argin):
        """ Ramp output to the target current
        :param argin: current
        :type argin: PyTango.DevFloat
        """
        self.debug_stream("In ramp()")
        #----- PROTECTED REGION ID(AndrewDevPogo.ramp) ENABLED START -----#
        self.attr_current_read = argin
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.ramp
        
    #----- PROTECTED REGION ID(AndrewDevPogo.programmer_methods) ENABLED START -----#
    #----- PROTECTED REGION END -----#	//	AndrewDevPogo.programmer_methods

class AndrewDevPogoClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(AndrewDevPogo.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	AndrewDevPogo.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'turn_on':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'turn_off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ramp':
            [[PyTango.DevFloat, "current"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'voltage':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Voltage",
                'unit': "V",
                'format': "%4.2f",
                'description': "output voltage",
            } ],
        'current':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Current",
                'unit': "A",
                'format': "%3.2f",
                'max value': "8.5",
                'min value': "0.0",
                'max alarm': "8.4",
                'min alarm': "0.1",
                'max warning': "8.0",
                'min warning': "0.5",
                'description': "output current (write setpoint, read actual)",
                'Display level': PyTango.DispLevel.EXPERT,
                'abs_change': "0.01",
            } ],
        'temperature':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Temperature",
                'unit': "degC",
                'display unit': "0.1",
                'format': "%3.1f",
                'description': "internal temperature",
                'Display level': PyTango.DispLevel.EXPERT,
                'abs_change': "50",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(AndrewDevPogoClass, AndrewDevPogo, 'AndrewDevPogo')
        #----- PROTECTED REGION ID(AndrewDevPogo.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	AndrewDevPogo.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
